variables:
  - name: DOCKER_BUILDKIT
    value: "1"
  - name: isVersionTag
    value: $[startsWith(variables['Build.SourceBranch'], 'refs/tags/v')]
  - name: COMPOSE_DOCKER_CLI_BUILD
    value: "1"
  - name: core-dockerRepository
    value: 282082958009.dkr.ecr.eu-west-2.amazonaws.com/forms4health-aireframe-mapping-service

trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - "*"

pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: Build
    jobs:
      - job: Build_backend
        displayName: "Build backend"
        steps:
          - task: UseDotNet@2
            displayName: "Install .NET 7 SDK"
            inputs:
              packageType: "sdk"
              version: "6.0.x"

          - powershell: |
              $(Build.SourcesDirectory)/src/Core/build-scripts/backend.ps1 -artifacts_dir $(Build.ArtifactStagingDirectory)/backendTestArtifacts
            workingDirectory: $(Build.SourcesDirectory)/src/Core
            displayName: "Run .NET Unit Tests"

          - publish: "$(Build.ArtifactStagingDirectory)/backendTestArtifacts"
            displayName: "Publish test artifacts"
            condition: succeededOrFailed()
            artifact: backendTestArtifacts

          - task: PublishTestResults@2
            displayName: "Publish .NET results"
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: "VSTest"
              testResultsFiles: "$(Build.ArtifactStagingDirectory)/backendTestArtifacts/dotnet/**/*.trx"
              testRunTitle: ".NET Unit Tests"

          - script: |
              dotnet tool install --global security-scan
              security-scan $(Build.SourcesDirectory)/src/Core/Core.sln --excl-proj=**/*Test*/** --cwe --export=sast-results.sarif --ignore-msbuild-errors
            displayName: "Run security san"
            continueOnError: true

          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact: Security Code Scan"
            continueOnError: true
            inputs:
              pathToPublish: "sast-results.sarif"
              artifactName: "CodeAnalysisLogs"

      - job: Build_frontend
        displayName: "Build frontend"
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: 16.x
          - task: Npm@1
            displayName: "NPM install"
            inputs:
              command: "custom"
              customCommand: "ci"
              workingDir: $(Build.SourcesDirectory)/src/front

          - task: Npm@1
            displayName: "Run lint"
            inputs:
              command: "custom"
              customCommand: "run lint"
              workingDir: $(Build.SourcesDirectory)/src/front

          - task: Npm@1
            displayName: "Check types"
            inputs:
              commands: "custom"
              customCommand: "run check-types"
              workingDir: $(Build.SourcesDirectory)/src/front

          - powershell: |
              $(Build.SourcesDirectory)/src/front/scripts/frontEndCodeCoverage.ps1 -artifacts_dir $(Build.ArtifactStagingDirectory)/frontendTestArtifacts
            workingDirectory: $(Build.SourcesDirectory)/src/front
            displayName: "Test"

          - publish: "$(Build.ArtifactStagingDirectory)/frontendTestArtifacts"
            displayName: "Publish test artifacts"
            condition: succeededOrFailed()
            artifact: frontendTestArtifacts

          - task: Npm@1
            displayName: "Build"
            inputs:
              command: "custom"
              customCommand: "run build"
              workingDir: $(Build.SourcesDirectory)/src/front

          - publish: "$(Build.SourcesDirectory)/src/front/build"
            displayName: "Publish client files"
            artifact: client

          - publish: "$(Build.ArtifactStagingDirectory)/frontendTestArtifacts"
            displayName: "Publish test artifacts"
            condition: succeededOrFailed()
            artifact: frontendTestArtifacts-$(Build.BuildId)

          - task: PublishTestResults@2
            displayName: "Publish JUnit results"
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "$(Build.SourcesDirectory)/src/front/artifacts/client/junit/*.xml"
              failTaskOnFailedTests: true
              testRunTitle: "Typescript Component Tests"

      - job: publish_code_coverage
        displayName: "Publish unit test coverage"
        condition: succeededOrFailed()
        dependsOn:
          - Build_backend
          - Build_frontend
        steps:
          - download: current
            artifact: backendTestArtifacts

          - download: current
            artifact: frontendTestArtifacts-$(Build.BuildId)

          - powershell: |
              $(Build.SourcesDirectory)/src/Core/build-scripts/merge-coverage.ps1 -dotnet_artifacts_dir $(Pipeline.Workspace)/backendTestArtifacts -client_artifacts_dir $(Pipeline.Workspace)/frontendTestArtifacts-$(Build.BuildId) -artifacts_dir $(Pipeline.Workspace)/artifacts
            displayName: "Merge code coverage"
            workingDirectory: $(Build.SourcesDirectory)/src/Core

          - task: PublishCodeCoverageResults@1
            displayName: "Publish code coverage"
            inputs:
              codeCoverageTool: cobertura
              summaryFileLocation: $(Pipeline.Workspace)/artifacts/code-coverage/Cobertura.xml
              reportDirectory: $(Pipeline.Workspace)/artifacts/code-coverage
              failIfCoverageEmpty: true

  - stage: Publish
    jobs:
      - job: push_core_image
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: client
              path: $(Build.SourcesDirectory)/src/front/build

          - task: AWSShellScript@1
            inputs:
              awsCredentials: "AWS AireLogic - ECR"
              regionName: "eu-west-2"
              scriptType: "inline"
              inlineScript: aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 282082958009.dkr.ecr.eu-west-2.amazonaws.com

          - task: Bash@3
            displayName: Get Image Tag
            inputs:
              targetType: "inline"
              script: |
                TAG=$(git tag -l v* --sort=-creatordate | head -n 1)
                echo "##vso[task.setvariable variable=ImageTag]$TAG"
              workingDirectory: "$(Build.SourcesDirectory)"

          - task: Docker@2
            displayName: Build Core Image
            inputs:
              command: build
              repository: $(core-dockerRepository)
              tags: |
                latest
                $(ImageTag)
              Dockerfile: "$(Build.SourcesDirectory)/src/Core/Core/dockerfile"
              buildContext: "$(Build.SourcesDirectory)"
              arguments: --build-arg CLIENT_PATH=src/front/build/

          - task: Docker@2
            displayName: Push Core Image
            inputs:
              command: push
              repository: $(core-dockerRepository)
              tags: |
                latest
                $(ImageTag)
